import requests
import re
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import time
# https://www.blackbox.ai/
import random
geolocator = Nominatim(user_agent="MyGeoBot/1.0")
def get_chatbot_response(user_text: str):
    # ارسال درخواست به API
    url = f"http://api.api-code.ir/api/ai-chatbot/?text={user_text}"
    response = requests.get(url)
    
    # بررسی وضعیت پاسخ API
    if response.status_code == 200:
        data = response.json()
        if "Result" in data:
            # حذف قسمت انگلیسی و نگه‌داشتن فقط پاسخ
            result_text = data["Result"]
            cleaned_text = re.sub(r"Generated by BLACKBOXAI.*?try unlimited chat.*\n\n", "", result_text, flags=re.DOTALL)
            return cleaned_text.strip()
        else:
            return "پاسخی یافت نشد."
    else:
        return f"خطا در اتصال به API، کد وضعیت: {response.status_code}"

def get_random_music_link():
    api_url = "https://api-free.ir/api/music/"
    response = requests.get(api_url)
    if response.status_code == 200:
        data = response.json()
        if data.get("ok") and data.get("result") and data["result"].get("song"):
            return data["result"]["song"]
    return None
def get_song(search_text: str):
    try:
        # ارسال درخواست به API برای جستجوی آهنگ
        url = f"https://api-free.ir/api/sr-music/?text={search_text}"
        response = requests.get(url)
        
        # بررسی وضعیت پاسخ API
        if response.status_code == 200:
            data = response.json()
            if data.get("ok") and "result" in data:
                return data["result"]  # عنوان و لینک آهنگ
            else:
                return {"error": "آهنگی یافت نشد یا مشکلی در پاسخ API وجود دارد."}
        else:
            return {"error": f"خطا در اتصال به API، کد وضعیت: {response.status_code}"}
            
    except Exception as e:
        return {"error": f"یک خطای غیرمنتظره رخ داد: {e}"}
    


def fetch_estekhare():
    url = "http://api-free.ir/api/es.php"
    response = requests.get(url)
    data = response.json()
    return data




# تابع برای دریافت ویدیو از API
def fetch_video():
    try:
        response = requests.get("https://api-free.ir/api/video/")
        if response.status_code == 200 and response.json().get("ok"):
            video_url = response.json()["result"]["url"]
            caption = response.json()["result"]["caption"]
            return video_url, caption
    except Exception as e:
        print("Error fetching video:", e)
    return None, None

def fetch_prof():
    try:
        response = requests.get("https://api-free.ir/api/prof.php")
        if response.status_code == 200 and response.json().get("ok"):
            texts = response.json()['result']
            return random.choice(texts)
        else:
            print("API Error: دریافت متن ممکن نیست.")
            return None
    except Exception as e:
        print("Error:", e)
        return None

def fetch_audio(text, voice_type):
    # آدرس وب‌سرویس به همراه پارامترها
    url = f"https://api.api-code.ir/text-to-voice/?text={text}&type={voice_type}"
    
    # ارسال درخواست به وب‌سرویس
    response = requests.get(url)
    
    # بررسی موفقیت درخواست
    if response.status_code == 200:
        data = response.json()
        if data["status"] == "success":
            # دانلود فایل صوتی
            audio_url = data["audio"]
            audio_response = requests.get(audio_url)
            if audio_response.status_code == 200:
                audio_path = f"{voice_type}_{text}.ogg"
                with open(audio_path, "wb") as audio_file:
                    audio_file.write(audio_response.content)
                return audio_path
    return None



# محاسبه دقیق BMI
def calculate_bmi(weight, height):
    try:
        bmi = weight / (height ** 2)  # BMI = وزن (کیلوگرم) / (قد (متر) ^ 2)
        return round(bmi, 2)
    except ZeroDivisionError:
        return None

# توصیه‌های پزشکی پیشرفته براساس BMI
def get_bmi_advice(bmi):
    if bmi < 18.5:
        return ("شما دچار **کمبود وزن** هستید. بهتر است با پزشک یا متخصص تغذیه مشورت کنید. "
                "با تغذیه متعادل و مصرف غذاهای مغذی، میزان کالری خود را افزایش دهید. "
                "ورزش‌های مقاومتی و تقویت‌کننده عضلات نیز برای شما مفید است.")
    elif 18.5 <= bmi < 24.9:
        return ("وزن شما در محدوده **نرمال** است. به‌طور مرتب رژیم غذایی سالم و فعالیت بدنی خود را ادامه دهید. "
                "سبک زندگی فعال می‌تواند به حفظ سلامتی شما کمک کند.")
    elif 25 <= bmi < 29.9:
        return ("شما دارای **اضافه وزن** هستید. برای بهبود وضعیت، می‌توانید رژیم غذایی متعادل‌تر و ورزش‌های مناسب "
                "مانند پیاده‌روی یا دویدن را در برنامه روزانه خود قرار دهید.")
    elif 30 <= bmi < 34.9:
        return ("شما دچار **چاقی** هستید. پیشنهاد می‌شود با یک متخصص تغذیه مشورت کنید. "
                "کاهش وزن به‌وسیله رژیم غذایی کم‌کالری و فعالیت بدنی منظم می‌تواند به شما کمک کند.")
    elif 35 <= bmi < 39.9:
        return ("شما دچار **چاقی شدید** هستید. برای کاهش وزن، مشاوره پزشکی و کمک از متخصص تغذیه ضروری است. "
                "فعالیت بدنی منظم و رژیم غذایی مناسب به شما کمک خواهد کرد.")
    else:
        return ("شما دچار **چاقی مفرط** هستید. در این مرحله، مشورت فوری با پزشک و متخصص تغذیه بسیار ضروری است. "
                "برنامه‌های کاهش وزن تحت نظر متخصصین می‌تواند به شما کمک کند.")

# بررسی ورودی‌های کاربر
def validate_input(message_text):
    if message_text.startswith("bmi:"):
        try:
            params = message_text[4:].split(',')
            weight = float(params[0].split('=')[1].strip())  # وزن
            height = float(params[1].split('=')[1].strip())  # قد
            if weight <= 0 or height <= 0:
                return None, "🚫 وزن یا قد وارد شده معتبر نیست. لطفاً مقادیر مثبت وارد کنید."
            return weight, height, None
        except (ValueError, IndexError):
            return None, None, "🚫 فرمت ورودی اشتباه است. لطفاً از فرمت `bmi:w=وزن,h=قد` استفاده کنید."
    return None, None, "🚫 لطفاً فرمت صحیح را وارد کنید. برای محاسبه BMI از فرمت `bmi:w=وزن,h=قد` استفاده کنید."

# تابعی برای دریافت مکان از geolocator و بازگشت لینک گوگل مپس
def get_location_map(location_name):
    try:
        # تبدیل مکان به مختصات جغرافیایی
        location = geolocator.geocode(location_name)
        if location:
            latitude = location.latitude
            longitude = location.longitude
            # ساخت لینک گوگل مپس
            google_maps_url = f"https://www.google.com/maps?q={latitude},{longitude}"
            return google_maps_url
        else:
            return "مکان پیدا نشد."
    except GeocoderTimedOut:
        # در صورت بروز خطا به دلیل زمان‌بر بودن پاسخ
        time.sleep(5)
        return get_location_map(location_name)  # تلاش دوباره
    except Exception as e:
        return f"خطا: {str(e)}"
    
    
async def search_myket(query: str):
    url = "https://pybot.info/api/myket.php"
    params = {
        "text": query,  # متن جستجو
        "lang": "fa",    # زبان فارسی
        "count": 1       # فقط یک نتیجه دریافت می‌کند
    }
    
    # ارسال درخواست به API مایکت
    response = requests.get(url, params=params)
    data = response.json()
    
    # بررسی اینکه آیا داده‌ها در دسترس هستند
    if data.get('ok'):
        results = data.get('data', [])
        return results[0] if results else None  # فقط اولین نتیجه را برمی‌گرداند
    else:
        return None
    

